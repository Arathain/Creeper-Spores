import java.time.Year
import com.modrinth.minotaur.TaskModrinthUpload;

plugins {
    id "fabric-loom" version "0.6-SNAPSHOT"
    id "net.minecrell.licenser" version "0.2.1"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.jfrog.bintray" version '1.8.4'
    id "com.jfrog.artifactory" version "4.20.0"
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.github.breadmoirai.github-release' version '2.2.9'
    id 'com.modrinth.minotaur' version '1.1.0'
    id "maven-publish"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

group = project.maven_group
archivesBaseName = project.name.toLowerCase(Locale.ROOT)
version = System.getenv("TRAVIS_TAG") ?: project.mod_version
println("Setting version: " + version)
 
processResources {
    // this will ensure that this task is redone when there"s a change
    inputs.property "version", project.version

    // replace stuff in fabric.mod.json, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"

        // add mod metadata
        expand "version": project.version , //"changelog_url": project.changelog_url,
                "curseforge_id": project.curseforge_id, "license": project.license_header,
                "mod_name": project.mod_name

    }

    // copy everything else, that"s not the fabric.mod.json
    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

repositories {
    maven {
        name = "FabricMC"
        url = "https://maven.fabricmc.net"
    }
    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"

    modRuntime ("io.github.prospector:modmenu:${modmenu_version}") {
        exclude group: 'net.fabricmc.fabric-api'
    }

    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

//    modRuntime "curse.maven:mobz-336554:2826831"

    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    compileOnly "org.jetbrains:annotations:19.0.0"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

license {
    header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")

    // Apply licenses only to main source set
    sourceSets = [project.sourceSets.main]
    include "**/*.java"

    newLine = false // Disables the empty line between the header and package name
    //ignoreFailures = true //Ignore failures and only print a warning on license violations

    //export variables
    ext {
        year = Year.now()
        projectDisplayName = project.name
        projectOwners = rootProject.owners
        if (project.license_header.contains('GPL')) {
            if (!project.hasProperty("gpl_version")) {
                throw new RuntimeException("GPL version needs to be specified through the 'gpl_version' property")
            }
            gplVersion = project.gpl_version
        }
    }
}

ext {
    // no idea how else to import TaskModrinthUpload from release.gradle
    TaskModrinthUpload2 = TaskModrinthUpload
}

apply from: 'release.gradle'
