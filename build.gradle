import java.time.Year
import com.modrinth.minotaur.TaskModrinthUpload

plugins {
    id "fabric-loom" version "0.10-SNAPSHOT"
    id 'org.quiltmc.quilt-mappings-on-loom' version "3.1.1"
    id 'io.github.juuxel.loom-quiltflower-mini' version "1.1.0"
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.jfrog.artifactory' version '4.21.0'
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
    id 'com.modrinth.minotaur' version '1.2.1'
    id 'maven-publish'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.name
version = project.mod_version
group = project.maven_group

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        // add mod metadata
        expand "version": project.version , //"changelog_url": project.changelog_url,
                "curseforge_id": project.curseforge_id, "license": project.license_header,
                "mod_name": project.mod_name
    }
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    runs {
        testmodClient {
            client()
            name = "Testmod Client"
            source sourceSets.testmod
        }
        testmodServer {
            server()
            name = "Testmod Server"
            source sourceSets.testmod
        }
        gametest {
            inherit testmodServer

            name "Game Test"

            // Enable the gametest runner
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "build/gametest"
        }
        autoTestServer {
            inherit testmodServer

            name "Auto Test Server"

            vmArg "-Dfabric.autoTest"
        }
    }
}
check.dependsOn runGametest

repositories {
    maven {
        name = "FabricMC"
        url = "https://maven.fabricmc.net"
    }
    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        url = 'https://maven.terraformersmc.com/releases'
        content {
            includeGroup 'com.terraformersmc'
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings(loom.layered {
        addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:v2"))
    })
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"

    modRuntimeOnly ("com.terraformersmc:modmenu:${modmenu_version}") {
        exclude group: 'net.fabricmc.fabric-api'
    }

    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

//    modRuntime "curse.maven:mobz-336554:2826831"
    modRuntime "curse.maven:carpet-349239:3542018"

    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    compileOnly "org.jetbrains:annotations:19.0.0"

    testmodImplementation sourceSets.main.output
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.18 (pre2) upwards uses Java 17.
    it.options.release.set(17)
}


java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

license {
    header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")

    include "**/*.java"

    newLine.set(false) // Disables the empty line between the header and package name
    //ignoreFailures = true //Ignore failures and only print a warning on license violations

    //export variables
    ext {
        year = Year.now()
        projectDisplayName = project.mod_name
        projectOwners = rootProject.owners
        if (project.license_header.contains('GPL')) {
            if (!project.hasProperty("gpl_version")) {
                throw new RuntimeException("GPL version needs to be specified through the 'gpl_version' property")
            }
            gplVersion = project.gpl_version
        }
    }
}

ext {
    // no idea how else to import TaskModrinthUpload from release.gradle
    ModrinthUpload = TaskModrinthUpload
}

apply from: 'release.gradle'
